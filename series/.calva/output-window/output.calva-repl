; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"0.8.3"},cider/cider-nrepl {:mvn/version,"0.25.8"}}}' -A:calva/reveal-dep-only -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
((\1 \2 \3) (\1 \2 \4) (\1 \2 \5) (\1 \3 \4) (\1 \3 \5) (\1 \4 \5) (\2 \3 \4) (\2 \3 \5) (\2 \4 \5) (\3 \4 \5))
clj꞉series꞉> 
("clojure.lang.LazySeq@13291"
 "clojure.lang.LazySeq@13292"
 "clojure.lang.LazySeq@13293"
 "clojure.lang.LazySeq@132b1"
 "clojure.lang.LazySeq@132b2"
 "clojure.lang.LazySeq@132d1"
 "clojure.lang.LazySeq@13672"
 "clojure.lang.LazySeq@13673"
 "clojure.lang.LazySeq@13692"
 "clojure.lang.LazySeq@13a53")
clj꞉series꞉> 
; Execution error (ArityException) at series/eval7580 (REPL:8).
; Wrong number of args (1) passed to: clojure.core/apply
clj꞉series꞉> 
("123" "124" "125" "134" "135" "145" "234" "235" "245" "345")
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
(()
 (\1)
 (\2)
 (\3)
 (\4)
 (\5)
 (\1 \2)
 (\1 \3)
 (\1 \4)
 (\1 \5)
 (\2 \3)
 (\2 \4)
 (\2 \5)
 (\3 \4)
 (\3 \5)
 (\4 \5)
 (\1 \2 \3)
 (\1 \2 \4)
 (\1 \2 \5)
 (\1 \3 \4)
 (\1 \3 \5)
 (\1 \4 \5)
 (\2 \3 \4)
 (\2 \3 \5)
 (\2 \4 \5)
 (\3 \4 \5)
 (\1 \2 \3 \4)
 (\1 \2 \3 \5)
 (\1 \2 \4 \5)
 (\1 \3 \4 \5)
 (\2 \3 \4 \5)
 (\1 \2 \3 \4 \5))
clj꞉series꞉> 
((\1 \2 \3) (\1 \2 \4) (\1 \2 \5) (\1 \3 \4) (\1 \3 \5) (\1 \4 \5) (\2 \3 \4) (\2 \3 \5) (\2 \4 \5) (\3 \4 \5))
clj꞉series꞉> 
((\1 \2 \4 \5 \3)
 (\1 \2 \5 \3 \4)
 (\1 \2 \5 \4 \3)
 (\1 \3 \2 \4 \5)
 (\1 \3 \2 \5 \4)
 (\1 \3 \4 \2 \5)
 (\1 \3 \4 \5 \2)
 (\1 \3 \5 \2 \4)
 (\1 \3 \5 \4 \2)
 (\1 \4 \2 \3 \5)
 (\1 \4 \2 \5 \3)
 (\1 \4 \3 \2 \5)
 (\1 \4 \3 \5 \2)
 (\1 \4 \5 \2 \3)
 (\1 \4 \5 \3 \2)
 (\1 \5 \2 \3 \4)
 (\1 \5 \2 \4 \3)
 (\1 \5 \3 \2 \4)
 (\1 \5 \3 \4 \2)
 (\1 \5 \4 \2 \3)
 (\1 \5 \4 \3 \2)
 (\2 \1 \3 \4 \5)
 (\2 \1 \3 \5 \4)
 (\2 \1 \4 \3 \5)
 (\2 \1 \4 \5 \3)
 (\2 \1 \5 \3 \4)
 (\2 \1 \5 \4 \3)
 (\2 \3 \1 \4 \5)
 (\2 \3 \1 \5 \4)
 (\2 \3 \4 \1 \5)
 (\2 \3 \4 \5 \1)
 (\2 \3 \5 \1 \4)
 (\2 \3 \5 \4 \1)
 (\2 \4 \1 \3 \5)
 (\2 \4 \1 \5 \3)
 (\2 \4 \3 \1 \5)
 (\2 \4 \3 \5 \1)
 (\2 \4 \5 \1 \3)
 (\2 \4 \5 \3 \1)
 (\2 \5 \1 \3 \4)
 (\2 \5 \1 \4 \3)
 (\2 \5 \3 \1 \4)
 (\2 \5 \3 \4 \1)
 (\2 \5 \4 \1 \3)
 (\2 \5 \4 \3 \1)
 (\3 \1 \2 \4 \5)
 (\3 \1 \2 \5 \4)
 (\3 \1 \4 \2 \5)
 (\3 \1 \4 \5 \2)
 (\3 \1 \5 \2 \4)
 ...)
clj꞉series꞉> 
; Execution error (ArityException) at series/eval7627 (REPL:9).
; Wrong number of args (5) passed to: clojure.core/vec
clj꞉series꞉> 
; Execution error (ArityException) at series/eval7629 (REPL:11).
; Wrong number of args (5) passed to: clojure.core/vec
clj꞉series꞉> 
; Execution error (ArityException) at series/eval7631 (REPL:11).
; Wrong number of args (5) passed to: clojure.lang.PersistentVector
clj꞉series꞉> 
; Execution error (ArityException) at series/eval7633 (REPL:11).
; Wrong number of args (5) passed to: clojure.lang.PersistentVector
clj꞉series꞉> 
#function[clojure.core/seq--5419]
clj꞉series꞉> 
; Execution error (ArityException) at series/eval7635 (REPL:11).
; Wrong number of args (5) passed to: clojure.core/seq--5419
clj꞉series꞉> 
; Execution error (ArityException) at series/eval7637 (REPL:11).
; Wrong number of args (5) passed to: clojure.core/seq--5419
clj꞉series꞉> 
(\1 \2 \3 \4 \5)
clj꞉series꞉> 
((\1 \2 \4 \5 \3)
 (\1 \2 \5 \3 \4)
 (\1 \2 \5 \4 \3)
 (\1 \3 \2 \4 \5)
 (\1 \3 \2 \5 \4)
 (\1 \3 \4 \2 \5)
 (\1 \3 \4 \5 \2)
 (\1 \3 \5 \2 \4)
 (\1 \3 \5 \4 \2)
 (\1 \4 \2 \3 \5)
 (\1 \4 \2 \5 \3)
 (\1 \4 \3 \2 \5)
 (\1 \4 \3 \5 \2)
 (\1 \4 \5 \2 \3)
 (\1 \4 \5 \3 \2)
 (\1 \5 \2 \3 \4)
 (\1 \5 \2 \4 \3)
 (\1 \5 \3 \2 \4)
 (\1 \5 \3 \4 \2)
 (\1 \5 \4 \2 \3)
 (\1 \5 \4 \3 \2)
 (\2 \1 \3 \4 \5)
 (\2 \1 \3 \5 \4)
 (\2 \1 \4 \3 \5)
 (\2 \1 \4 \5 \3)
 (\2 \1 \5 \3 \4)
 (\2 \1 \5 \4 \3)
 (\2 \3 \1 \4 \5)
 (\2 \3 \1 \5 \4)
 (\2 \3 \4 \1 \5)
 (\2 \3 \4 \5 \1)
 (\2 \3 \5 \1 \4)
 (\2 \3 \5 \4 \1)
 (\2 \4 \1 \3 \5)
 (\2 \4 \1 \5 \3)
 (\2 \4 \3 \1 \5)
 (\2 \4 \3 \5 \1)
 (\2 \4 \5 \1 \3)
 (\2 \4 \5 \3 \1)
 (\2 \5 \1 \3 \4)
 (\2 \5 \1 \4 \3)
 (\2 \5 \3 \1 \4)
 (\2 \5 \3 \4 \1)
 (\2 \5 \4 \1 \3)
 (\2 \5 \4 \3 \1)
 (\3 \1 \2 \4 \5)
 (\3 \1 \2 \5 \4)
 (\3 \1 \4 \2 \5)
 (\3 \1 \4 \5 \2)
 (\3 \1 \5 \2 \4)
 ...)
clj꞉series꞉> 
(\1 \2 \3 \4 \5)
clj꞉series꞉> 
(()
 (\1)
 (\2)
 (\3)
 (\4)
 (\5)
 (\1 \2)
 (\1 \3)
 (\1 \4)
 (\1 \5)
 (\2 \3)
 (\2 \4)
 (\2 \5)
 (\3 \4)
 (\3 \5)
 (\4 \5)
 (\1 \2 \3)
 (\1 \2 \4)
 (\1 \2 \5)
 (\1 \3 \4)
 (\1 \3 \5)
 (\1 \4 \5)
 (\2 \3 \4)
 (\2 \3 \5)
 (\2 \4 \5)
 (\3 \4 \5)
 (\1 \2 \3 \4)
 (\1 \2 \3 \5)
 (\1 \2 \4 \5)
 (\1 \3 \4 \5)
 (\2 \3 \4 \5)
 (\1 \2 \3 \4 \5))
clj꞉series꞉> 
(()
 (\1)
 (\2)
 (\3)
 (\4)
 (\5)
 (\1 \2)
 (\1 \3)
 (\1 \4)
 (\1 \5)
 (\2 \3)
 (\2 \4)
 (\2 \5)
 (\3 \4)
 (\3 \5)
 (\4 \5)
 (\1 \2 \3)
 (\1 \2 \4)
 (\1 \2 \5)
 (\1 \3 \4)
 (\1 \3 \5)
 (\1 \4 \5)
 (\2 \3 \4)
 (\2 \3 \5)
 (\2 \4 \5)
 (\3 \4 \5)
 (\1 \2 \3 \4)
 (\1 \2 \3 \5)
 (\1 \2 \4 \5)
 (\1 \3 \4 \5)
 (\2 \3 \4 \5)
 (\1 \2 \3 \4 \5))
clj꞉series꞉> 
()
clj꞉series꞉> 
#function[clojure.core/count]
clj꞉series꞉> 
((\1 \2 \3) (\1 \2 \4) (\1 \2 \5) (\1 \3 \4) (\1 \3 \5) (\1 \4 \5) (\2 \3 \4) (\2 \3 \5) (\2 \4 \5) (\3 \4 \5))
clj꞉series꞉> 
((((# \2 \3 \4) \2 \3 \5) \2 \4 \5) \3 \4 \5)
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7676$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Execution error (ClassCastException) at series/eval7689$fn (REPL:9).
; class clojure.lang.PersistentList$EmptyList cannot be cast to class clojure.lang.IFn (clojure.lang.PersistentList$EmptyList and clojure.lang.IFn are in unnamed module of loader 'app')
clj꞉series꞉> 
; Execution error (ClassCastException) at series/eval7700$fn (REPL:9).
; class clojure.lang.LazySeq cannot be cast to class clojure.lang.IFn (clojure.lang.LazySeq and clojure.lang.IFn are in unnamed module of loader 'app')
clj꞉series꞉> 
((b) (b) (b) (b) (b) (b) (b) (b) (b) (b))
clj꞉series꞉> 
; Syntax error compiling at (src/series.clj:0:0).
; Unable to resolve symbol: b in this context
clj꞉series꞉> 
(((\3 \4 \5))
 ((\2 \4 \5))
 ((\2 \3 \5))
 ((\2 \3 \4))
 ((\1 \4 \5))
 ((\1 \3 \5))
 ((\1 \3 \4))
 ((\1 \2 \5))
 ((\1 \2 \4))
 ((\1 \2 \3)))
clj꞉series꞉> 
((((# #) (\2 \3 \5)) (\2 \4 \5)) (\3 \4 \5))
clj꞉series꞉> 
((((# #) (\2 \3 \5)) (\2 \4 \5)) (\3 \4 \5))
clj꞉series꞉> 
; Syntax error compiling at (src/series.clj:0:0).
; Unable to resolve symbol: b in this context
clj꞉series꞉> 
((\3 \4 \5) (\2 \4 \5))
clj꞉series꞉> 
((((# \2 \3 \4) \2 \3 \5) \2 \4 \5) \3 \4 \5)
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7787$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
((\3 \4 \5) (\2 \4 \5))
clj꞉series꞉> 
#function[clojure.core/cons--5393]
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7810$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7824$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Execution error (ClassCastException) at series/eval7832$fn (REPL:9).
; class clojure.lang.LazySeq cannot be cast to class clojure.lang.IFn (clojure.lang.LazySeq and clojure.lang.IFn are in unnamed module of loader 'app')
clj꞉series꞉> 
(\3 \2 \1)
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7892$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7901$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7918$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7926$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7938$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
; Syntax error compiling at (src/series.clj:0:0).
; Unable to resolve symbol: a in this context
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/eval7947$fn (REPL:9).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
(\3 \2 \1)
clj꞉series꞉> 
((\3 \4 \5) (\2 \4 \5) (\2 \3 \5) (\2 \3 \4) (\1 \4 \5) (\1 \3 \5) (\1 \3 \4) (\1 \2 \5) (\1 \2 \4) \3 \2 \1)
clj꞉series꞉> 
((((# \2 \3 \4) \2 \3 \5) \2 \4 \5) \3 \4 \5)
clj꞉series꞉> 
; Execution error (ClassCastException) at series/eval8001$fn (REPL:9).
; class clojure.lang.LazySeq cannot be cast to class clojure.lang.IFn (clojure.lang.LazySeq and clojure.lang.IFn are in unnamed module of loader 'app')
clj꞉series꞉> 
(\5 \4 \3 \5 \4 \2 \5 \3 \2 \4 \3 \2 \5 \4 \1 \5 \3 \1 \4 \3 \1 \5 \2 \1 \4 \2 \1 \3 \2 \1)
clj꞉series꞉> 
((((# \4 \3 \2) \5 \3 \2) \5 \4 \2) \5 \4 \3)
clj꞉series꞉> 
((\5 \4 \3) (\5 \4 \2) (\5 \3 \2) (\4 \3 \2) (\5 \4 \1) (\5 \3 \1) (\4 \3 \1) (\5 \2 \1) (\4 \2 \1) \3 \2 \1)
clj꞉series꞉> 
((((# \4 \3 \2) \5 \3 \2) \5 \4 \2) \5 \4 \3)
clj꞉series꞉> 
((\3 \4 \5) (\2 \4 \5) (\2 \3 \5) (\2 \3 \4) (\1 \4 \5) (\1 \3 \5) (\1 \3 \4) (\1 \2 \5) (\1 \2 \4) \3 \2 \1)
clj꞉series꞉> 
((\3 \4 \5) (\2 \4 \5) (\2 \3 \5) (\2 \3 \4) (\1 \4 \5) (\1 \3 \5) (\1 \3 \4) (\1 \2 \5) (\1 \2 \4) (\1 \2 \3))
clj꞉series꞉> 
((\3 \4 \5) (\2 \4 \5) (\2 \3 \5) (\2 \3 \4) (\1 \4 \5) (\1 \3 \5) (\1 \3 \4) (\1 \2 \5) (\1 \2 \4) (\1 \2 \3))
clj꞉series꞉> 
((\3 \4 \5) (\2 \3 \4) (\1 \2 \3))
clj꞉series꞉> 
false
clj꞉series꞉> 
true
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
("2345" "1234")
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["2345" "1234"]
clj꞉series꞉> 
["345" "234" "123"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["345" "clojure.lang.LazySeq@13672[(\\1 \\2 \\3) []]"]
clj꞉series꞉> 
["345" "clojure.lang.LazySeq@13672[(\\1 \\2 \\3) []]"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (ArityException) at series/slices$fn (REPL:6).
; Wrong number of args (3) passed to: clojure.core/vec
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/slices$fn (REPL:6).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["(((((((([] (\\1 \\2 \\3)) (\\1 \\2 \\4)) (\\1 \\2 \\5)) (\\1 \\3 \\4)) (\\1 \\3 \\5)) (\\1 \\4 \\5)) (\\2 \\3 \\4)) (\\2 \\3 \\5))clojure.lang.LazySeq@13692"
 "345"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/slices$fn (REPL:5).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/slices$fn (REPL:5).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/slices$fn (REPL:5).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["123" "234" "235" "245" "345"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["123" "234" "345"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["" "123" "234" "345"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["123" "234" "345"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
((\1 \2 \3) (\1 \2 \4) (\1 \2 \5) (\1 \3 \4) (\1 \3 \5) (\1 \4 \5) (\2 \3 \4) (\2 \3 \5) (\2 \4 \5) (\3 \4 \5))
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/slices$fn (REPL:14).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (IllegalArgumentException) at series/slices$fn (REPL:14).
; Don't know how to create ISeq from: java.lang.Character
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
[(\1 \2 \3) (\2 \3 \4) (\3 \4 \5)]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["123" "234" "345"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
[""]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
; Execution error (ArityException) at series/slices (REPL:13).
; Wrong number of args (0) passed to: series/slices/fn--8693
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#function[series/slices/fn--8750]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#function[series/slices/fn--8782]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#function[series/slices/fn--8808]
clj꞉series꞉> 
; Syntax error compiling at (src/series.clj:20:16).
; Unable to resolve symbol: length in this context
clj꞉series꞉> 
#function[series/eval8833/fn--8834]
clj꞉series꞉> (macroexpand
              (->> (combo/subsets "12345")
                   (filter #(= 1000 (count %)))
                   (reduce (fn [a b]
                             (if-not (= (first (last a)) (first b))
                               (conj (if-not (= a [""]) a []) b)
                               a))
                           [""])
                   (mapv #(apply str %))
                   #(when (> 1000 (count %)) map [] %)))
#function[series/eval8849/fn--8850]
clj꞉series꞉> 
[""]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
""
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
[]
clj꞉series꞉> 
[]
clj꞉series꞉> 
[]
clj꞉series꞉> 
; Syntax error compiling at (src/series.clj:0:0).
; Can't take value of a macro: #'clojure.core/defn
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
[]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
[]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
[""]
clj꞉series꞉> 
["12" "23"]
clj꞉series꞉> 
[]
clj꞉series꞉> 
["123"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["123" "234" "345"]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
["123" "234" "345"]
clj꞉series꞉> 
[""]
clj꞉series꞉> 
[]
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#'series/slices
clj꞉series꞉> 
#'series/nstr
clj꞉series꞉> 
[]
clj꞉series꞉> 
["123" "234" "345"]
clj꞉series꞉> 
[""]
clj꞉series꞉> 
[]
clj꞉series꞉> 
; nREPL Connection was closed
